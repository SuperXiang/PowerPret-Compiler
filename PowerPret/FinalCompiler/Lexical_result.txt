/*

 * sort
 */
Line:6 double [ 6 ] R ;
	(Line:6:	"KWDOUBLE"	double)  
	(Line:6:	"LBRACKET"	[)  
	(Line:6:	"INTEGER_CONSTANT"	6)  
	(Line:6:	"RBRACKET"	])  
	(Line:6:	"IDENTIFIER"	R)  
	(Line:6:	"EOL"	;)  
Line:7 R [ 1 ] = - 0.99 ;
	(Line:7:	"IDENTIFIER"	R)  
	(Line:7:	"LBRACKET"	[)  
	(Line:7:	"INTEGER_CONSTANT"	1)  
	(Line:7:	"RBRACKET"	])  
	(Line:7:	"ASSIGNMENT"	=)  
	(Line:7:	"MINUS"	-)  
	(Line:7:	"DOUBLE_CONSTANT"	0.99)  
	(Line:7:	"EOL"	;)  
Line:8 R [ 2 ] = - 1.0 ;
	(Line:8:	"IDENTIFIER"	R)  
	(Line:8:	"LBRACKET"	[)  
	(Line:8:	"INTEGER_CONSTANT"	2)  
	(Line:8:	"RBRACKET"	])  
	(Line:8:	"ASSIGNMENT"	=)  
	(Line:8:	"MINUS"	-)  
	(Line:8:	"DOUBLE_CONSTANT"	1.0)  
	(Line:8:	"EOL"	;)  
Line:9 R [ 3 ] = 5.0 ;
	(Line:9:	"IDENTIFIER"	R)  
	(Line:9:	"LBRACKET"	[)  
	(Line:9:	"INTEGER_CONSTANT"	3)  
	(Line:9:	"RBRACKET"	])  
	(Line:9:	"ASSIGNMENT"	=)  
	(Line:9:	"DOUBLE_CONSTANT"	5.0)  
	(Line:9:	"EOL"	;)  
Line:10 R [ 4 ] = 4.01 ;
	(Line:10:	"IDENTIFIER"	R)  
	(Line:10:	"LBRACKET"	[)  
	(Line:10:	"INTEGER_CONSTANT"	4)  
	(Line:10:	"RBRACKET"	])  
	(Line:10:	"ASSIGNMENT"	=)  
	(Line:10:	"DOUBLE_CONSTANT"	4.01)  
	(Line:10:	"EOL"	;)  
Line:11 R [ 5 ] = 3.0 ;
	(Line:11:	"IDENTIFIER"	R)  
	(Line:11:	"LBRACKET"	[)  
	(Line:11:	"INTEGER_CONSTANT"	5)  
	(Line:11:	"RBRACKET"	])  
	(Line:11:	"ASSIGNMENT"	=)  
	(Line:11:	"DOUBLE_CONSTANT"	3.0)  
	(Line:11:	"EOL"	;)  
Line:13 int i ;
	(Line:13:	"KWINT"	int)  
	(Line:13:	"IDENTIFIER"	i)  
	(Line:13:	"EOL"	;)  
Line:14 int j ;
	(Line:14:	"KWINT"	int)  
	(Line:14:	"IDENTIFIER"	j)  
	(Line:14:	"EOL"	;)  
Line:15 int swap ;
	(Line:15:	"KWINT"	int)  
	(Line:15:	"IDENTIFIER"	swap)  
	(Line:15:	"EOL"	;)  
Line:16 i = 6 ;
	(Line:16:	"IDENTIFIER"	i)  
	(Line:16:	"ASSIGNMENT"	=)  
	(Line:16:	"INTEGER_CONSTANT"	6)  
	(Line:16:	"EOL"	;)  
Line:17 while ( i != 1 )
	(Line:17:	"KWWHILE"	while)  
	(Line:17:	"LPARENTHESIS"	()  
	(Line:17:	"IDENTIFIER"	i)  
	(Line:17:	"NOT_EQUAL"	!=)  
	(Line:17:	"INTEGER_CONSTANT"	1)  
	(Line:17:	"RPARENTHESIS"	))  
Line:18 {
	(Line:18:	"LBLOCK"	{)  
Line:19 swap = 0 ;
	(Line:19:	"IDENTIFIER"	swap)  
	(Line:19:	"ASSIGNMENT"	=)  
	(Line:19:	"INTEGER_CONSTANT"	0)  
	(Line:19:	"EOL"	;)  
Line:20 j = 1 ;
	(Line:20:	"IDENTIFIER"	j)  
	(Line:20:	"ASSIGNMENT"	=)  
	(Line:20:	"INTEGER_CONSTANT"	1)  
	(Line:20:	"EOL"	;)  
Line:21 while ( j < i - 1 )
	(Line:21:	"KWWHILE"	while)  
	(Line:21:	"LPARENTHESIS"	()  
	(Line:21:	"IDENTIFIER"	j)  
	(Line:21:	"LESS_THAN"	<)  
	(Line:21:	"IDENTIFIER"	i)  
	(Line:21:	"MINUS"	-)  
	(Line:21:	"INTEGER_CONSTANT"	1)  
	(Line:21:	"RPARENTHESIS"	))  
Line:22 {
	(Line:22:	"LBLOCK"	{)  
Line:24 if ( R [ j + 1 ] < R [ j ] )
	(Line:24:	"KWIF"	if)  
	(Line:24:	"LPARENTHESIS"	()  
	(Line:24:	"IDENTIFIER"	R)  
	(Line:24:	"LBRACKET"	[)  
	(Line:24:	"IDENTIFIER"	j)  
	(Line:24:	"PLUS"	+)  
	(Line:24:	"INTEGER_CONSTANT"	1)  
	(Line:24:	"RBRACKET"	])  
	(Line:24:	"LESS_THAN"	<)  
	(Line:24:	"IDENTIFIER"	R)  
	(Line:24:	"LBRACKET"	[)  
	(Line:24:	"IDENTIFIER"	j)  
	(Line:24:	"RBRACKET"	])  
	(Line:24:	"RPARENTHESIS"	))  
Line:25 {
	(Line:25:	"LBLOCK"	{)  
Line:26 swap = 1 ;
	(Line:26:	"IDENTIFIER"	swap)  
	(Line:26:	"ASSIGNMENT"	=)  
	(Line:26:	"INTEGER_CONSTANT"	1)  
	(Line:26:	"EOL"	;)  
Line:27 R [ 0 ] = R [ j ] ;
	(Line:27:	"IDENTIFIER"	R)  
	(Line:27:	"LBRACKET"	[)  
	(Line:27:	"INTEGER_CONSTANT"	0)  
	(Line:27:	"RBRACKET"	])  
	(Line:27:	"ASSIGNMENT"	=)  
	(Line:27:	"IDENTIFIER"	R)  
	(Line:27:	"LBRACKET"	[)  
	(Line:27:	"IDENTIFIER"	j)  
	(Line:27:	"RBRACKET"	])  
	(Line:27:	"EOL"	;)  
Line:28 R [ j ] = R [ j + 1 ] ;
	(Line:28:	"IDENTIFIER"	R)  
	(Line:28:	"LBRACKET"	[)  
	(Line:28:	"IDENTIFIER"	j)  
	(Line:28:	"RBRACKET"	])  
	(Line:28:	"ASSIGNMENT"	=)  
	(Line:28:	"IDENTIFIER"	R)  
	(Line:28:	"LBRACKET"	[)  
	(Line:28:	"IDENTIFIER"	j)  
	(Line:28:	"PLUS"	+)  
	(Line:28:	"INTEGER_CONSTANT"	1)  
	(Line:28:	"RBRACKET"	])  
	(Line:28:	"EOL"	;)  
Line:29 R [ j + 1 ] = R [ 0 ] ;
	(Line:29:	"IDENTIFIER"	R)  
	(Line:29:	"LBRACKET"	[)  
	(Line:29:	"IDENTIFIER"	j)  
	(Line:29:	"PLUS"	+)  
	(Line:29:	"INTEGER_CONSTANT"	1)  
	(Line:29:	"RBRACKET"	])  
	(Line:29:	"ASSIGNMENT"	=)  
	(Line:29:	"IDENTIFIER"	R)  
	(Line:29:	"LBRACKET"	[)  
	(Line:29:	"INTEGER_CONSTANT"	0)  
	(Line:29:	"RBRACKET"	])  
	(Line:29:	"EOL"	;)  
Line:30 }
	(Line:30:	"RBLOCK"	})  
Line:31 j = j + 1 ;
	(Line:31:	"IDENTIFIER"	j)  
	(Line:31:	"ASSIGNMENT"	=)  
	(Line:31:	"IDENTIFIER"	j)  
	(Line:31:	"PLUS"	+)  
	(Line:31:	"INTEGER_CONSTANT"	1)  
	(Line:31:	"EOL"	;)  
Line:32 }
	(Line:32:	"RBLOCK"	})  
Line:33 i = i - 1 ;
	(Line:33:	"IDENTIFIER"	i)  
	(Line:33:	"ASSIGNMENT"	=)  
	(Line:33:	"IDENTIFIER"	i)  
	(Line:33:	"MINUS"	-)  
	(Line:33:	"INTEGER_CONSTANT"	1)  
	(Line:33:	"EOL"	;)  
Line:34 if ( swap != 1 )
	(Line:34:	"KWIF"	if)  
	(Line:34:	"LPARENTHESIS"	()  
	(Line:34:	"IDENTIFIER"	swap)  
	(Line:34:	"NOT_EQUAL"	!=)  
	(Line:34:	"INTEGER_CONSTANT"	1)  
	(Line:34:	"RPARENTHESIS"	))  
Line:35 i = 1 ;
	(Line:35:	"IDENTIFIER"	i)  
	(Line:35:	"ASSIGNMENT"	=)  
	(Line:35:	"INTEGER_CONSTANT"	1)  
	(Line:35:	"EOL"	;)  
Line:36 }
	(Line:36:	"RBLOCK"	})  
Line:38 int k = 1 ;
	(Line:38:	"KWINT"	int)  
	(Line:38:	"IDENTIFIER"	k)  
	(Line:38:	"ASSIGNMENT"	=)  
	(Line:38:	"INTEGER_CONSTANT"	1)  
	(Line:38:	"EOL"	;)  
Line:39 while ( k < 6 )
	(Line:39:	"KWWHILE"	while)  
	(Line:39:	"LPARENTHESIS"	()  
	(Line:39:	"IDENTIFIER"	k)  
	(Line:39:	"LESS_THAN"	<)  
	(Line:39:	"INTEGER_CONSTANT"	6)  
	(Line:39:	"RPARENTHESIS"	))  
Line:40 {
	(Line:40:	"LBLOCK"	{)  
Line:41 write ( R [ k ] ) ;
	(Line:41:	"KWWRITE"	write)  
	(Line:41:	"LPARENTHESIS"	()  
	(Line:41:	"IDENTIFIER"	R)  
	(Line:41:	"LBRACKET"	[)  
	(Line:41:	"IDENTIFIER"	k)  
	(Line:41:	"RBRACKET"	])  
	(Line:41:	"RPARENTHESIS"	))  
	(Line:41:	"EOL"	;)  
Line:42 k = k + 1 ;
	(Line:42:	"IDENTIFIER"	k)  
	(Line:42:	"ASSIGNMENT"	=)  
	(Line:42:	"IDENTIFIER"	k)  
	(Line:42:	"PLUS"	+)  
	(Line:42:	"INTEGER_CONSTANT"	1)  
	(Line:42:	"EOL"	;)  
Line:43 }
	(Line:43:	"RBLOCK"	})  
/*
output:
-1.0
-0.99
3.0
4.01
5.0 
*/
//:~

